trigger:
  tags:
    include:
    - v*
  branches:
    include:
    - master
   
variables:
    GOVERSION: '1.13.1'
    LDFLAGS: "-w -s -X main.Version=$(Build.SourceBranchName) -X main.Commit=$(Build.SourceVersion) -X main.Build=$(Build.BuildNumber)"

jobs:
- job: linux
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
    CGO_ENABLED: '0'
    GOOS: 'linux'
    GOARCH: 'amd64'

  steps:
    - task: GoTool@0
      displayName: 'Use Go $(GOVERSION)'
      inputs:
        version: '$(GOVERSION)'

    - task: Go@0
      displayName: 'Show build environment'
      inputs:
        command: custom
        customCommand: env
    
    - task: Go@0
      displayName: 'Compile $(GOOS)/$(GOARCH)'
      inputs:
        command: build
        arguments: -ldflags """$(LDFLAGS)""" -o "$(Build.BinariesDirectory)/$(System.TeamProject)"

    - task: CopyFiles@2
      displayName: 'Stage supporting files'
      inputs:
        sourceFolder: $(Build.SourcesDirectory)
        contents: '$(System.TeamProject).toml' 
        targetFolder: $(Build.BinariesDirectory)

    - task: ArchiveFiles@2
      displayName: 'Create application archive'
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)' 
        includeRootFolder: false 
        archiveType: 'tar'
        tarCompression: 'gz'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(System.TeamProject)_$(Build.SourceBranchName)_$(GOOS)_$(GOARCH).tar.gz'
        verbose: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish $(GOOS) artifacts'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: Drop
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v')))

    - task: Docker@2
      displayName: 'Build/Push Docker image (master)'
      inputs:
        command: buildAndPush
        buildContext: $(Build.BinariesDirectory)
        containerRegistry: bryanklewis-dockerhub
        repository: bryanklewis/$(System.TeamProject)
        tags: |
          $(Build.SourceBranchName)
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: Docker@2
      displayName: 'Build/Push Docker image (version)'
      inputs:
        command: buildAndPush
        buildContext: $(Build.BinariesDirectory)
        containerRegistry: bryanklewis-dockerhub
        repository: bryanklewis/$(System.TeamProject)
        tags: |
          $(Build.SourceBranchName)
          latest
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))

- job: windows
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    CGO_ENABLED: '0'
    GOOS: 'windows'
    GOARCH: 'amd64'
  
  steps:
    - task: GoTool@0
      displayName: 'Use Go $(GOVERSION)'
      inputs:
        version: '$(GOVERSION)'
    
    - task: Go@0
      displayName: 'Show build environment'
      inputs:
        command: custom
        customCommand: env

    - task: Go@0
      displayName: 'Compile $(GOOS)/$(GOARCH)'
      inputs:
        command: build
        arguments: -ldflags """$(LDFLAGS)""" -o $(Build.BinariesDirectory)\$(System.TeamProject).exe

    - task: CopyFiles@2
      displayName: 'Stage supporting files'
      inputs:
        sourceFolder: $(Build.SourcesDirectory)
        contents: '$(System.TeamProject).toml' 
        targetFolder: $(Build.BinariesDirectory)

    - task: ArchiveFiles@2
      displayName: 'Create application archive'
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)' 
        includeRootFolder: false 
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(System.TeamProject)_$(Build.SourceBranchName)_$(GOOS)_$(GOARCH).zip'
        verbose: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish $(GOOS) artifacts'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: Drop
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v')))
